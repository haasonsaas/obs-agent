# Chat Intelligence Configuration Example
# Copy this file to chat_intelligence.env and fill in your credentials

# =================================================================
# TWITCH CONFIGURATION
# =================================================================

# Get OAuth token from: https://twitchapps.com/tmi/
# Required scopes: chat:read (for reading chat messages)
TWITCH_OAUTH_TOKEN=oauth:your_twitch_oauth_token_here

# Your Twitch username (must match the OAuth token account)
TWITCH_USERNAME=your_twitch_username

# Get Client ID from: https://dev.twitch.tv/console/apps
# Required for EventSub integration (optional for basic chat)
TWITCH_CLIENT_ID=your_twitch_client_id_here

# =================================================================
# YOUTUBE CONFIGURATION  
# =================================================================

# Option 1: API Key (simpler, read-only access)
# Get from: https://console.developers.google.com/apis/credentials
# Enable YouTube Data API v3
YOUTUBE_API_KEY=your_youtube_api_key_here

# Option 2: OAuth Token (more features, requires OAuth flow)
# Use Google OAuth 2.0 for more advanced features
YOUTUBE_OAUTH_TOKEN=your_youtube_oauth_token_here

# =================================================================
# DISCORD CONFIGURATION
# =================================================================

# Bot Token from Discord Developer Portal
# Get from: https://discord.com/developers/applications
# Bot needs "Read Messages" and "View Channels" permissions
DISCORD_BOT_TOKEN=your_discord_bot_token_here

# Webhook URLs for receiving Discord messages (optional)
# Format: https://discord.com/api/webhooks/{webhook_id}/{webhook_token}
DISCORD_WEBHOOK_URL_1=https://discord.com/api/webhooks/your_webhook_here
DISCORD_WEBHOOK_URL_2=https://discord.com/api/webhooks/another_webhook_here

# =================================================================
# OBS WEBSOCKET CONFIGURATION
# =================================================================

# OBS WebSocket connection details
OBS_HOST=localhost
OBS_PORT=4455
OBS_PASSWORD=your_obs_websocket_password

# =================================================================
# CHAT INTELLIGENCE SETTINGS
# =================================================================

# Analysis settings
CHAT_ANALYSIS_INTERVAL=30  # seconds between automated analysis
CHAT_MESSAGE_BUFFER_SIZE=100  # number of messages to keep in memory

# Automation thresholds (0.0 to 1.0)
ENGAGEMENT_LOW_THRESHOLD=0.3
TOXICITY_HIGH_THRESHOLD=0.6
SENTIMENT_DROP_THRESHOLD=-0.5

# Enable/disable features
ENABLE_AUTO_RESPONSES=true
ENABLE_SENTIMENT_ANALYSIS=true
ENABLE_TOXICITY_DETECTION=true
ENABLE_ENGAGEMENT_PREDICTION=true

# Logging level (DEBUG, INFO, WARNING, ERROR)
CHAT_INTELLIGENCE_LOG_LEVEL=INFO

# =================================================================
# LANGUAGE MODEL CONFIGURATION (Optional)
# =================================================================

# OpenAI API Key for advanced language model features
OPENAI_API_KEY=your_openai_api_key_here

# Alternative: Local language model endpoint
LOCAL_LLM_ENDPOINT=http://localhost:11434/v1  # Example: Ollama endpoint

# =================================================================
# SECURITY SETTINGS
# =================================================================

# Rate limiting settings
MAX_MESSAGES_PER_MINUTE=1000
MAX_ANALYSIS_REQUESTS_PER_MINUTE=60

# Data retention (in days)
MESSAGE_RETENTION_DAYS=7
ANALYSIS_RETENTION_DAYS=30

# =================================================================
# DEVELOPMENT SETTINGS
# =================================================================

# Enable debug mode for development
DEBUG_MODE=false

# Mock mode for testing without real chat connections
MOCK_CHAT_MODE=false

# Test channels for development
TEST_TWITCH_CHANNEL=your_test_channel
TEST_YOUTUBE_VIDEO_ID=your_test_video_id
TEST_DISCORD_GUILD_ID=your_test_guild_id
TEST_DISCORD_CHANNEL_ID=your_test_channel_id